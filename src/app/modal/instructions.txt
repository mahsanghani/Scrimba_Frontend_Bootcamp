<html>
    <head>
        <link rel="stylesheet" href="styles.css">
    </head>
    <body>
        <!-- 1) we need a div with an ID of 'overlay' -->
        <!-- 2) inside the div of 'overlay', we need a div with an ID of 'modal' -->
        <!-- 3) the modal div you can put whatever you want in there... -->
        <!-- 3.1) add a h2 tag in here with text of 'Contact Details'
        <!-- 3.2) add a p tag in here with the text of 'Homer Simpson, 742 Evergreen Terrace (no spam please!) ðŸ˜€'
        <!-- 3.3) add a button in here with the id of 'close-modal' with the text Close! ðŸ‘‹ (as we'll need a reference to get back to this from the JavaScript we write!) 'close-button' sounds good! -->

        <!-- 4 -->
        <!-- add a h1 tag with the text 'ðŸ‘‡ Click to reveal Homer's contact details! ðŸ‘‡' -->
        <!-- add a button with the text 'Contact Me ðŸ“¨' and with an ID of 'open-modal' -->

        <script src="index.pack.js"></script>
    </body>
</html>

/** we need to style our open and close buttons, re-use the comma , to target both buttons **/
/** modal -> remember we used an ID for this div? we can target it by doing #modal **/
/** overlay -> we also used an ID for this, so do the same as above **/
/** the overlay must overtake the screen, so how would you make the overlay 100% height and 100% width so it fills the entire screen? it also must position itself above everything else!

/**
  Our buttons '#open-modal, #close-modal'

  1) For the background colour use 'royalblue'
  2) Be aware of the colour, padding & font size
  3) Make sure the cursor has a pointer so that it demonstrates to the user the button is clickable
**/

/**
  Modal: #modal

  1) Add a temporary background colour of 'orange'
  2) Add a padding of 20px
  3) Add a height of 200px
  4) Add a margin of 0 & auto to make sure our Modal is centered
**/

/**
  Overlay: #overlay

  1) Add a width and a height of 100%
  2) Position absolute (allows us to place any element exactly where we want it)
  3) Set top, left, bottom, right to 0
  4) Add a background colour of black
  5) Add position relative to #modal so that it's relative to #overlay
  6) Put the background of #modal to white (temp background no longer needed)
  7) Add top: 30% to #modal
**/

/*
========= Things to note =========
  1) remember on the presentation we want to briefly hide the background of the modal overlay? hint: look at the notes below! rgba...
  2)
*/

/*
======== Helpers
  - rgba = red, green blue, alpha (alpha being the opacity on a scale of 0 to 1 - 0.5 sounds good?)
  - rgba is complex and it's a bit of a time sink to remember all the values, look at rgba colour values online, or rgba colour convetors, or even colour palettes!
  - if you come from a design background, you'll know you can convert HEX values (e.g. #ffffff to rgba using a convertor)
*/

// we need an event listener just attaches to an element (like a light switch) - in this case a DOM element, our button(s)!
// DOM elements = anything you see on the page on the document (divs, buttons, tables, links--any HTML element!divs, buttons, tables, links--any HTML element!)
// you can switch out "click" or be other types of DOM events (keydown, mouseover), any sort of event that a user can do, you can capture user actions using event listeners!

/**
  Creating interactive buttons: Open Modal

  0) Add 'display: none' to '#overlay' - we want to hide it initially!
  1) Use document.getElementById to target "open-modal"
  2) Add an event listener of "click"
  3) Use document.getElementById to target "overlay" and change the style.display to "block"
**/

/**
  Creating interactive buttons: Close Modal

  1) Use document.getElementById to target "close-modal"
  2) Add an event listener of "click"
  3) Use document.getElementById to target "overlay" and change the style.display to "none"
**/

